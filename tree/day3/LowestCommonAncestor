//approach 1
class Solution {
    public boolean getpath(TreeNode root, TreeNode n , List<TreeNode> path){
        if(root == null){
            return false;
        }
        path.add(root);
        if(root.val == n.val){
            return true;
        }

        boolean leftfound = getpath(root.left,n,path);
        boolean rightfound = getpath(root.right,n,path);

        if(leftfound || rightfound){
            return true;
        } 
        path.remove(path.size()-1);
        return false;
    }
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode n1, TreeNode n2) {
        List<TreeNode> path1 = new ArrayList<>();
        List<TreeNode> path2 = new ArrayList<>();

        getpath(root, n1,path1);
        getpath(root, n2,path2);

        int i=0;
        for(;i<path1.size()&&i<path2.size();i++){
            if(path1.get(i) != path2.get(i)){
                break;
            }
        }        

        TreeNode lca = path1.get(i-1);
        return lca;
    }
}
